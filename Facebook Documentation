
                                      HTTP / 1.1

Усі передачі даних відповідають HTTP / 1.1, і всі кінцеві точки вимагають HTTPS. Ми також включили директиву includeSubdomains HSTS на facebook.com, але це не повинно негативно впливати на ваші виклики API Graph.













                                    URL-адреса хоста

Майже всі запити передаються в graph.facebook.com host URL. Єдиним винятком є завантаження відео, яке використовує графік-graph-video.facebook.com.


















                                     Токени доступу

Токени доступу дозволяють вашому додатку отримувати доступ до API-графіків. Вони зазвичай виконують дві функції:

     вони дозволяють вашому додатку отримувати доступ до інформації користувача, не вимагаючи пароль користувача, і
     вони дозволяють нам ідентифікувати ваше додаток, Користувача, який використовує ваш додаток, і тип даних, до яких Користувач дозволив вашій програмі отримати доступ.

Всі кінцеві точки API Graph вимагають певного токена доступу, тому кожен раз, коли ви отримуєте доступ до кінцевої точки, ваш запит має містити один.














                                      Як працюють токени

Токени доступу відповідають протоколу OAuth 2.0. OAuth 2.0 дозволяє такі об'єкти, як Користувач або Сторінка, для авторизації маркерів. Зазвичай це робиться через веб-інтерфейс. Після авторизації додатки можуть використовувати ці токенти для доступу до певної інформації.

Наприклад, ця програма просить Користувача надати йому дозвіл на доступ до фотографій, відео та електронної адреси користувача:


https://www.facebook.com/v2.12/dialog/oauth?response_type=token&...


/home/sasha/Downloads/facebook0.png.png

Як бачите, це інтерфейс Facebook. Користувач щойно використовував інтерфейс для входу в свій обліковий запис, що дозволило нам автентифікувати Користувача. Якщо користувач продовжуватиметься, ми обміняємо старий токен (маркер додатка) з новим (токен користувача). Після цього додаток може використовувати новий токен користувачів для створення запитів API-графіків, але може мати доступ лише до цих конкретних фотографій, відео та електронної адреси Користувача.

Це важливий атрибут маркерів доступу. Ідентифікатор додатка, Користувач, який надав доступ, а також тип даних, яким Користувач дозволив додатку отримувати доступ, все це закодовано в самий токен (серед іншого). Наприклад, якщо ви перевірили токен після отримання Користувачем дозволу, він виявить цю інформацію:

/home/sasha/Downloads/facebook.png

Оскільки токени дозволяють отримувати доступ до даних користувача, і оскільки вони можуть бути використані будь-яким, вони є надзвичайно цінними, тому, приймаючи заходи, використовуючи їх у своїх запитах. Найпростіший спосіб зробити це - використати Facebook для входу у ваш жетони.









                                  Facebook Login

OAuth 2.0 передбачає безліч переадресацій, підказки для входу в систему та обмін токенами, щоб полегшити вам роботу, ми створили продукт Facebook Login. Вхід у Facebook має прості у використанні функції та методи для всіх наших SDK, які можуть працювати з токенами доступу набагато простіше, ніж створення власного рішення.

Щоб дізнатись більше про токени доступу та ввійти до Facebook, або про те, як створити власне рішення, зверніться до нашої документації для входу в Facebook.










                                          Reading
Nodes

Операції читання майже завжди починаються з вузла. Вузол - це окремий об'єкт із унікальним ідентифікатором. Наприклад, є багато об'єктів вузлів сторінки, кожен з яких має унікальний ідентифікатор, і сторінка Coca-Cola є єдиною з ідентифікатором 820882001277849. Щоб прочитати будь-який вузол, ви запитаєте ідентифікатор певного об'єкта. Отже, щоб прочитати вузол Coca-Cola Page, ви запитаєте його ідентифікатор:

GET https://graph.facebook.com/v2.11
  /820882001277849


Цей запит за замовчуванням повертає наступні поля (властивості вузлів), відформатовані за допомогою JSON:


{
  "name": "Coca-Cola",
  "id": "820882001277849"
}

















                                            Edges
Краю

Вузли мають ребра, які зазвичай можуть повертати колекції інших вузлів, які до них прикріплені. Щоб прочитати край, ви повинні включити як ідентифікатор вузла, так і назву краю на шляху. Наприклад, вузли / сторінки мають кордон / feed, який може повертати всі вузли Повідомлення на Сторінку. Ось як ви можете використати край, щоб отримати всі повідомлення на сторінці Coca-Cola:


GET https://graph.facebook.com/v2.11
  /820882001277849
    /feed

Відповідь JSON буде виглядати приблизно так:

{
  "data": [
    {
      "created_time": "2017-12-08T01:08:57+0000",
      "message": "Love this puzzle. One of my four coke puzzles",
      "id": "820882001277849_1805191182846921"
    },
    {
      "created_time": "2017-12-07T20:06:14+0000",
      "message": "You need to add grape as a flavor for Coke in your freestyle machines.",
      "id": "820882001277849_1804966026202770"
    },
    {
      "created_time": "2017-12-07T01:29:12+0000",
      "message": "Plz play the old commercial’s with the polar bears. Would be nice to see them this holiday",
      "id": "820882001277849_1804168469615859"
    }
  ]
}

Зверніть увагу, що відповідь містить не тільки ідентифікатори поштових вузлів колекції, але і поля створеного_ часу та повідомлень. Це звичайно. Більшість країв за умовчанням включатиме одне або кілька полів.



















                                         Поля  Fields

Поля - це властивості вузла. Коли ви запитуєте вузол, він повертає набір полів за замовчуванням, як показує приклади вище. Тим не менш, ви можете вказати, які поля потрібно повернути, використовуючи параметри полів і перелічуючи кожне поле. Це перевизначить значення за промовчанням і повернеть лише ті поля, які ви вкажете, а також ідентифікатор об'єкта, який завжди повертається.

Наприклад, посилання вузла сторінки вказує, які поля можна запитати при читанні вузла сторінки. Якщо ви хочете отримати інформацію про поля, fan_count та веб-сторінки на сторінці Coca-Cola, ви можете зробити це:

GET https://graph.facebook.com/v2.11
  /820882001277849
    ?fields=about,fan_count,website



Це поверне наступну відповідь:

{
  "about": "Welcome to the happiest Facebook page on, um, Facebook.",
  "fan_count": 106714402,
  "website": "http://coca-cola.com",
  "id": "820882001277849"
}


Кромки, які зазвичай повертають колекції об'єктів, також повертають поля про кожен об'єкт у колекції. Скажімо, ви використали край / фотографії, щоб отримати всі вузли фото на сторінці Coca-Cola:


GET https://graph.facebook.com/v2.11
  /820882001277849
    /photos


Це створить відповідь, яка схожа на це:

{
  "data": [
    {
      "created_time": "2016-08-23T13:12:10+0000",
      "id": "1308573619175349"
    },
    {
      "created_time": "2016-08-05T22:34:19+0000",
      "id": "1294456907253687"
    },
    {
      "created_time": "2016-04-29T16:17:02+0000",
      "id": "1228552183844160"
    }
  ]
}


Як ви можете бачити, біля / photos edge за замовчуванням повертає колекцію ідентифікаторів вузлів фото, а також властивість create_time для кожної фотографії. Як і в вузлах, ви можете використовувати параметри полів для того, щоб вказати, які поля потрібно повернути для кожного об'єкта, що повертається в колекції.

Скажімо, ви хочете отримати поля висоти, ширини та посилання (URL) для кожного вузла фото, що повернуто краєм / photos:

GET https://graph.facebook.com/v2.11
  /820882001277849
    /photos
      ?fields=height,width,link


Ось що виглядає відповідь:

{
  "data": [
    {
      "height": 720,
      "width": 720,
      "link": "https://www.facebook.com/CocaColaUnitedStates/photos/a.820887414610641.1073741825.820882001277849/1308573619175349/?type=3",
      "id": "1308573619175349"
    },
    {
      "height": 720,
      "width": 720,
      "link": "https://www.facebook.com/CocaColaUnitedStates/photos/a.820887414610641.1073741825.820882001277849/1294456907253687/?type=3",
      "id": "1294456907253687"
    },
    {
      "height": 180,
      "width": 180,
      "link": "https://www.facebook.com/CocaColaUnitedStates/photos/a.820887414610641.1073741825.820882001277849/1228552183844160/?type=3",
      "id": "1228552183844160"
    }
  ]
}

Зверніть увагу, що ви можете вказати ребро з параметрами полів, що корисно, коли ви використовуєте поле розширення.
















                             Розширення поля  Field Expansion

Якщо вам довелося випробувати запит GET / page / photos вище в Explorer Graphi API, ви, напевно, помітили, що запит повернув більше трьох об'єктів, а також видавлені результати. Це поширене для більшості країв. Ми розглянемо результати обробки результатів найближчим часом, але зараз розглянемо розширення області, що дозволяє не тільки виконувати вкладені запити, але й обмежувати і замовляти результати.
Обмеження результатів

Обмеження дозволяє вам контролювати кількість об'єктів, що повертаються в кожному наборі результатів з виправленими сторінками. Щоб обмежити результати, додайте аргумент .limit () до будь-якого поля або краю.

Наприклад, виконання запиту GET на сторінці Coca-Cola Page / feed може повернути сотні повідомлень. Ви можете обмежити кількість повідомлень, що повертаються для кожної сторінки результатів, виконавши це:

GET https://graph.facebook.com/v2.11
  /820882001277849
    ?fields=feed.limit(3)

Це повертає всі повідомлення на сторінці Coca-Cola, але обмежує кількість об'єктів на кожній сторінці результатів до трьох. Зверніть увагу, що замість того, щоб вказати край каналу у URL-адресі шляху (/ page / feed), вкажіть його в параметрах полів (поля «= потік»), що дозволяє додати аргумент .limit (3).

Ось результати запиту:

{
  "feed": {
    "data": [
      {
        "created_time": "2017-12-12T01:24:21+0000",
        "message": "This picture of my grandson with Santa screams Coca Cola",
        "id": "820882001277849_1809387339093972"
      },
      {
        "created_time": "2017-12-11T23:40:17+0000",
        "message": ":)",
        "id": "820882001277849_1809316002434439"
      },
      {
        "created_time": "2017-12-11T23:31:38+0000",
        "message": "Thought you might enjoy this.  My horse loves Coke!",
        "id": "820882001277849_1809310929101613"
      }
    ],
    "paging": {
      "cursors": {
        "before": "Q2c4U1pXNTBYM0YxWlhKNVgzTjBiM0o1WDJsa0R5UTRNakE0T0RJd01ERXlOemM0TkRrNkxUVXdPRE16TXpVM01EQXpNVFUwTkRRME5Ua1BER0ZA3YVY5emRHOXllVjlwWkE4ZA09ESXdPRGd5TURBeE1qYzNPRFE1WHpFNE1Ea3pPRGN6TXprd09UTTVOeklQQkhScGJXVUdXaTh2eFFFPQZDZD",
        "after": "Q2c4U1pXNTBYM0YxWlhKNVgzTjBiM0o1WDJsa0R5TTRNakE0T0RJd01ERXlOemM0TkRrNk1UTTJORE01T0RVNU1UZAzVPRGMyTnpFNE1BOE1ZAWEJwWDNOMGIzSjVYMmxrRHlBNE1qQTRPREl3TURFeU56YzRORGxmTVRnd09USXdOamsxTlRjM09EWTNOdzhFZAEdsdFpRWmFMdk9HQVE9PQZDZD"
      },
      "next": "https://graph.intern.facebook.com/v2.11/820882001277849/feed?access_token=valid_token_goes_here"
    }
  },
  "id": "820882001277849"
}

Як ви бачите, на цій сторінці результатів, з якими було виведено пеінінг, з'являються лише три об'єкти, але відповідь містила наступне поле та URL-адресу, які можна використовувати для отримання наступної сторінки.
Результати замовлення

Ви можете замовити результати на основі часу створення об'єкта. Для цього використовуйте аргумент .order () з одним з наступних значень на полі або краю.

     хронологічно - результати замовлень спочатку складаються з найстарішими створені об'єктами.
     reverse_chronological - послідовність результатів за замовчуванням з новими створені об'єкти в першу чергу.

Наприклад, давайте отримаємо всі коментарі на одному з Сторінок Coca-Cola Page (1809938745705498), заплануємо результати в хронологічному порядку (найстаріший спочатку) і обмежте кількість об'єктів за результатами сторінок до трьох:

GET https://graph.facebook.com/v2.11
  /1809938745705498
    ?fields=comments.order(chronological).limit(3)


Знову ж таки, зверніть увагу, що для того, щоб використовувати аргумент на краю, потрібно вказати край у параметрі полів. І, як ви бачите, ви можете об'єднати аргументи .limit () і .order () на одне поле або край.

Ось результати:

{
  "comments": {
    "data": [
      {
        "created_time": "2017-12-12T14:12:20+0000",
        "message": ":) :) :)",
        "id": "1809938745705498_1809939942372045"
      },
      {
        "created_time": "2017-12-12T14:14:03+0000",
        "message": "seasons greetings!",
        "id": "1809938745705498_1809941802371859"
      },
      {
        "created_time": "2017-12-12T14:14:11+0000",
        "message": "My bestie <3",
        "id": "1809938745705498_1809941879038518"
      }
    ],
    "paging": {
      "cursors": {
        "before": "WTI5dGJXVnVkRjlqZAFhKemIzSTZANVGd3T1Rrek9UZAzROVGN3TlRNNE5Eb3hOVEV6TURnM09UTTIZD",
        "after": "WTI5dGJXVnVkRjlqZAFhKemIzSTZANVGd4TURBd09UazROVFk1T0RNM05Eb3hOVEV6TURreU5qQXoZD"
      },
      "next": "https://graph.intern.facebook.com/v2.11/1809938745705498/comments?access_token=valid_token_goes_here"
    }
  },
  "id": "1809938745705498"
}



















                                Видавництво  Publishing

Більшість країв дозволяють публікувати об'єкти до колекції на вузлі. Ви можете зробити це за допомогою запиту POST на краю вузла. Наприклад, ви можете опублікувати Коментар на фотографії за допомогою вузла фото / коментар краю:

POST https://graph.facebook.com
  /1809938745705498
    /comments
      ?message=Awesome!

Якщо це буде успішно, більшість країв поверне ідентифікатор об'єкта, який ви щойно опублікували, що часто являє собою комбінацію ідентифікатора, в якому був опублікований об'єкт, і нову ідентифікаційну рядок:

{
  "id": "1809938745705498_1810399758992730"
}

Публікація зазвичай вимагає додаткових дозволів, тому, будь ласка, зверніться до довідкової документації кожної країні, щоб визначити, які дозволи їм потрібні.

Токен доступу, який використовується для публікації об'єкта, може вплинути на зовнішній вигляд об'єкта. Якщо використовується токен доступу до сторінки, він з'являється так, ніби Сторінка опублікувала цей об'єкт, тоді як токен доступу користувача призведе до появи об'єкта, як надісланого особою.

Багато країв також підтримують розширені функції, такі як Read-After-Write, що дозволяє негайно прочитати нещодавно опублікований об'єкт та Batch Publishing, що дозволяє об'єднувати разом кілька операцій з публікації.

















                                      Оновлення  Updating

Ви можете виконувати операції оновлення на існуючому вузлі за допомогою запитів POST. Наприклад, щоб оновити поле повідомлення на існуючому коментар, ви можете зробити це:

POST https://graph.facebook.com
  /1809938745705498_1810399758992730
    ?message=Happy%20Holidays!

If successful, the node will return a success field and a value of true:

{
  "success": true
}

Подібно до видавничих операцій, операції оновлення вимагають додаткових дозволів, які будуть перелічені у довідковій документації кожного вузла. І, як і більшість країв, багато вузлів підтримують Read-After-Write.





















                                         Видалення Deleting

Ви можете зазвичай видалити вузол за допомогою операції DELETE:

DELETE https://graph.facebook.com
  /1809938745705498_1810399758992730


Якщо це буде успішним, вузол поверне поле успіху та значення true:


{
  "success": true
}


Usually you can only delete nodes that you created, but check each node's reference guide to see requirements for delete operations.


Зазвичай ви можете видаляти тільки ті вузли, які ви створили, але перегляньте довідковий посібник кожного вузла, щоб побачити вимоги до операцій видалення.

Щоб підтримувати клієнтів, які не підтримують всі методи HTTP, ви можете надіслати запит POST на вузол і включити параметр method = delete та значення, щоб перевизначити метод HTTP:

POST https://graph.facebook.com
  /1809938745705498_1810399758992730
    ?method=delete
